{"version":3,"file":"vanilla-click-outside.js","sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import { isNodeList, isHTMLCollection, isHTMLElement } from './utils'\n\nexport type Selector = HTMLElement | HTMLCollection | NodeList | Element\nexport type Callback = (state: boolean | undefined, event: Event) => void\n\nexport type Options = {\n  removeListener: boolean\n}\n\nconst defaultOptions: Options = {\n  removeListener: true,\n}\n\nfunction vanillaClickOutside(\n  selector: Selector,\n  callback: Callback,\n  options?: Options\n): EventListener {\n  const theOptions = { ...defaultOptions, ...options }\n\n  const listener = (event: Event) => {\n    if (isNodeList(selector) || isHTMLCollection(selector)) {\n      // Not working with spread: https://github.com/developit/microbundle/issues/693\n      // eslint-disable-next-line unicorn/prefer-spread\n      if (Array.from(selector).some((s) => s.contains(<Node>event.target))) {\n        return callback(false, event)\n      }\n    } else if (isHTMLElement(selector)) {\n      if (selector.contains(<Node>event.target)) {\n        return callback(false, event)\n      }\n    } else {\n      console.warn('Undefined type of', typeof selector, selector)\n      return callback(undefined, event)\n    }\n\n    if (theOptions.removeListener) {\n      document.removeEventListener('click', listener)\n    }\n\n    return callback(true, event)\n  }\n\n  document.addEventListener('click', listener)\n\n  return listener\n}\n\nexport default vanillaClickOutside\n","/* eslint-disable no-prototype-builtins */\n\nimport { Selector } from 'src'\n\nexport function isNodeList(target: Selector): target is NodeList {\n  return NodeList.prototype.isPrototypeOf(target)\n}\n\nexport function isHTMLCollection(target: Selector): target is HTMLCollection {\n  return HTMLCollection.prototype.isPrototypeOf(target)\n}\n\nexport function isHTMLElement(target: Selector): target is HTMLElement {\n  return HTMLElement.prototype.isPrototypeOf(target)\n}\n\nexport function isElement(target: Selector): target is Element {\n  return Element.prototype.isPrototypeOf(target)\n}\n"],"names":["defaultOptions","removeListener","selector","callback","options","theOptions","listener","event","NodeList","prototype","isPrototypeOf","HTMLCollection","Array","from","some","s","contains","target","HTMLElement","console","warn","undefined","document","removeEventListener","addEventListener"],"mappings":"+MASA,IAAMA,EAA0B,CAC9BC,gBAAgB,kBAGlB,SACEC,EACAC,EACAC,GAEA,IAAMC,OAAkBL,EAAmBI,GAErCE,EAAW,SAAXA,EAAYC,GAChB,GChBKC,SAASC,UAAUC,cDgBTR,ICZVS,eAAeF,UAAUC,cDYeR,IAG3C,GAAIU,MAAMC,KAAKX,GAAUY,KAAK,SAACC,UAAMA,EAAEC,SAAeT,EAAMU,UAC1D,OAAOd,GAAS,EAAOI,YCZtBW,YAAYT,UAAUC,cDcFR,GAMvB,OADAiB,QAAQC,KAAK,2BAA4BlB,EAAUA,GAC5CC,OAASkB,EAAWd,GAL3B,GAAIL,EAASc,SAAeT,EAAMU,QAChC,OAAOd,GAAS,EAAOI,GAW3B,OAJIF,EAAWJ,gBACbqB,SAASC,oBAAoB,QAASjB,GAGjCH,GAAS,EAAMI,IAKxB,OAFAe,SAASE,iBAAiB,QAASlB,GAE5BA"}